- Crear proyecto
pnpm create next-app nextjs

- Instalar prettier
pnpm add -D prettier

- Crear archivo .prettierrc en la raiz con el siguiente contenido
{
    "semi": true,
    "singleQuote":true,
    "prettier.bracketSpacing": true,
    "prettier.arrowParens": "avoid",
    "tailingComma": "all",
    "tabWidth": 4
}

- Configurar archivo .eslintrc.json con el siguiente contenido
{
    "extends": [
        "next",
        "next/core-web-vitals",
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:prettier/recommended"
    ],
    "plugins": ["@typescript-eslint/eslint-plugin"],
    "globals": {
        "React": "readonly"
    },
    "rules": {
        "no-unused-vars": "warn",
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/no-explicit-any": "off"
    }
}

- Se agrega el siguiente path en el archivo tsconfig.json
"paths": {
      "@core/*": ["./src/core/*"]
    }

- Se codifican las entidades en /src/core/entities
export default class TodoEntity {
    constructor(
        id: number |undefined,
        taskName: string,
        completed: boolean,
        userId: number,
        createdAt: Date|undefined,
        updatedAt: Date |undefined
    ) {
        this.id = id;
        this.taskName = taskName;
        this.completed = completed;
        this.userId = userId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public id: number|undefined;
    public taskName: string;
    public completed: boolean;
    public userId: number;
    public readonly createdAt: Date | undefined;
    public readonly updatedAt: Date | undefined;
}

export default class UserEntity {
    constructor(
        id: number | undefined,
        firstName: string,
        lastName: string,
        email: string,
        password: string | undefined,
        createdAt: Date | undefined,
        updatedAt: Date | undefined
    ) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    public id: number | undefined;
    public firstName: string;
    public lastName: string;
    public email: string;
    public password: string | undefined;
    public createdAt: Date|undefined;
    public updatedAt: Date|undefined;
}

- tambien se agrega las interfaces de los repositorios en src/core/repositories
import TodoEntity from '@core/entities/todo.entity';

export default interface ITodoRepository {
    create(todo: TodoEntity): Promise<TodoEntity>;
    update(id: number, todo: TodoEntity): Promise<TodoEntity>;
    delete(id: number): Promise<TodoEntity>;
    findByName(name: string): Promise<TodoEntity[]>;
    findById(id: number): Promise<TodoEntity>;
}

import UserEntity from "@core/entities/user.entity";

export default interface IUserRepository {
    create(user: UserEntity): Promise<UserEntity>;
    update(id: number, user: UserEntity): Promise<UserEntity>;
    delete(id: number): Promise<UserEntity>;
    findById(id: number): Promise<UserEntity>;
    findByEmail(email: string): Promise<UserEntity>;
}

- a continuacion se agregan los servicios del core (src/core/services) y las correspondientes exceptions (src/core/exceptions)
export default class ExistingRecordException extends Error {
    constructor(message: string) {
        super(message);
        this.name = 'ExistingRecordException';
    }
}

export default class RecordCannotBeDeletedException extends Error {
    constructor(message: string) {
        super(message);
        this.name = 'RecordCannotBeDeletedException';
    }
}

export default class RecordNotFoundException extends Error {
    constructor(message: string) {
        super(message);
        this.name = 'RecordNotFoundException';
    }
}

export default class RequiredFieldException extends Error {
    constructor(fieldName: string) {
        super(`El campo '${fieldName}' es requerido.`);
        this.name = 'RequiredFieldException';
    }
}

import TodoEntity from '@core/entities/todo.entity';
import ExistingRecordException from '@core/exceptions/existing-record.exception';
import RecordCannotBeDeletedException from '@core/exceptions/record-not-be-deleted.exception';
import RecordNotFoundException from '@core/exceptions/record-not-found.exception';
import RequiredFieldException from '@core/exceptions/required-field.exception';
import ITodoRepository from '@core/repositories/itodo.repository';

export default class TodoService {
    constructor(private readonly _todoRepository: ITodoRepository) {}

    public async createTodo(todo: TodoEntity): Promise<TodoEntity> {
        if (!todo.taskName)
            throw new RequiredFieldException(
                'El campo "task_name" es requerido'
            );

        return this._todoRepository.create(todo);
    }

    public async updateTodo(id: number, todo: TodoEntity): Promise<TodoEntity> {
        if (!todo.taskName) throw new RequiredFieldException('El campo "task_name" es requerido');

        const findedTodo = await this._todoRepository.findById(id);

        if (findedTodo) {
            throw new ExistingRecordException(
                `La tarea con id "${id}" ya existe.`
            );
        }

        return this._todoRepository.update(id, todo);
    }

    public async deleteTodo(id: number): Promise<TodoEntity> {
        const findedTodo = await this._todoRepository.findById(id);

        if (!findedTodo) {
            throw new RecordCannotBeDeletedException(
                `El registro con id "${id}" no existe.`
            );
        }

        return this._todoRepository.delete(id);
    }

    public async findTodoById(id: number): Promise<TodoEntity> {
        const findedTodo = await this._todoRepository.findById(id);

        if (!findedTodo) {
            throw new RecordNotFoundException(
                `El registro con id "${id}" no existe.`
            );
        }

        return findedTodo;
    }

    public async findTodoByName(name: string): Promise<TodoEntity[]> {
        const findedTodo = await this._todoRepository.findByName(name);

        if (!findedTodo) {
            throw new RecordNotFoundException(
                `No existen registro que contengan el nombre ${name}.`
            );
        }

        return findedTodo;
    }
}

import UserEntity from "@core/entities/user.entity";
import RecordNotFoundException from "@core/exceptions/record-not-found.exception";
import RequiredFieldException from "@core/exceptions/required-field.exception";
import IUserRepository from "@core/repositories/iuser.repository";

export default class UserService {
    constructor(private readonly _userRepository: IUserRepository) {}

    public async createUser(user: UserEntity): Promise<UserEntity> {
        if (!user.firstName) throw new RequiredFieldException('El campo "first_name" es requerido');
        if (!user.lastName) throw new RequiredFieldException('El campo "last_name" es requerido');
        if (!user.email) throw new RequiredFieldException('El campo "email" es requerido');
        if (!user.password) throw new RequiredFieldException('El campo "password" es requerido');

        return this._userRepository.create(user);
    }

    public async updateTodo(id: number, user: UserEntity): Promise<UserEntity> {
        if (!user.firstName) throw new RequiredFieldException('El campo "first_name" es requerido');
        if (!user.lastName) throw new RequiredFieldException('El campo "last_name" es requerido');
        if (!user.email) throw new RequiredFieldException('El campo "email" es requerido');

        const userFinded = await this._userRepository.findById(id);

        if (!userFinded) throw new RecordNotFoundException(`El usuario con id "${id}" no existe`);

        return this._userRepository.update(id, user)
    }

    public async deleteTodo(id: number): Promise<UserEntity> {
        const userFinded = await this._userRepository.findById(id);

        if (!userFinded) throw new RecordNotFoundException(`El usuario con id "${id}" no existe`);

        return this._userRepository.delete(id)
    }

    public async findUserById(id: number): Promise<UserEntity> {
        const userFinded = await this._userRepository.findById(id);

        if (!userFinded) throw new RecordNotFoundException(`El usuario con id "${id}" no existe.`);

        return userFinded;
    }

    public async findUserByEmail(email: string): Promise<UserEntity> {
        const userFinded = await this._userRepository.findByEmail(email);

        if (!userFinded) throw new RecordNotFoundException(`El usuario con email "${email}" no existe`);

        return userFinded;
    }
}

- Ahora se requiere la instalacion de prisma para luego crear las entidades

